from _typeshed import Incomplete
from typing import Any

from .base import BaseMixin

logger: Incomplete

class AttachmentsMixin(BaseMixin):
    def get_attachment_infos_by_hash(self, hashvalue: str) -> dict[str, Any] | None: ...
    def get_attachment_infos_for_resource(self, resource_type: str, resource_id: str) -> list[dict[str, Any]]: ...
    def get_attachment_infos_for_release(self, release_id: str) -> list[dict[str, Any]]: ...
    def get_attachment_infos_for_component(self, component_id: str) -> list[dict[str, Any]]: ...
    def get_attachment_infos_for_project(self, project_id: str) -> list[dict[str, Any]]: ...
    def get_attachment_by_url(self, url: str) -> dict[str, Any] | None: ...
    def get_attachment(self, attachment_id: str) -> dict[str, Any] | None: ...
    def download_release_attachment(self, filename: str, release_id: str, attachment_id: str) -> None: ...
    def download_project_attachment(self, filename: str, project_id: str, attachment_id: str) -> None: ...
    def download_component_attachment(self, filename: str, component_id: str, attachment_id: str) -> None: ...
    def download_resource_attachment(self, filename: str, resource_type: str, resource_id: str, attachment_id: str) -> None: ...
    def download_attachment(self, filename: str, download_url: str) -> None: ...
    def upload_release_attachment(
        self, release_id: str, upload_file: str, upload_type: str = "SOURCE", upload_comment: str = ""
    ) -> None: ...
    def upload_component_attachment(
        self, component_id: str, upload_file: str, upload_type: str = "SOURCE", upload_comment: str = ""
    ) -> None: ...
    def upload_project_attachment(
        self, project_id: str, upload_file: str, upload_type: str = "SOURCE", upload_comment: str = ""
    ) -> None: ...
